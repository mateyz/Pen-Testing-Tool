"""
Written by: Christopher Hutchings | M00571702
Last edit: 25/02/21
Module: CST4550
---
The first and main tool, scans for devices on the network and attempts to bannergrab them, producing a report at the end.
"""

#Dictionary Imports
from pprint import pprint
from colorama import Fore, Back, Style
from pyfiglet import Figlet
import PySimpleGUI as sg
import tkinter as tk

#Process imports
import os
import subprocess
import time
import socket

import ipaddress
import nmap
import scapy.all as scapy
import progressbar

#Module imports
from . import Menu as menu
from . import Database as db

#Preset OS functions
clear = lambda: os.system('clear')

# Target ports
portList = [21, 22, 25, 80, 443, 139, 445]  

def main(ip, SubIP):
	clear()
	###########################
	#Fancy looking CMD screen
	print('\033[1m')
	print(Fore.YELLOW + '-----------------------------------------------------------------------------------------------') # May the gods forgive me for this part.
	print(Fore.RED + '				NETWORK VULNERABILITY SCANNER')
	print(Fore.YELLOW + '-----------------------------------------------------------------------------------------------') # But it looks cool.

	###########################
	#Socket preferences
	socket.setdefaulttimeout(5)
	###########################v

	
	#Packet preferences
	###########################
	arp_r = scapy.ARP(pdst='10.0.2.0/24') # Target network
	br = scapy.Ether(dst='ff:ff:ff:ff:ff:ff') # Default MAC Broadcast
	###########################


	#Packet deployment & Data Recollection
	###########################
	request = br/arp_r
	answered, unanswered = scapy.srp(request, timeout=1, verbose = False)
	###########################


	#Visual loading bar setup for user readability
	###########################
	print(Fore.YELLOW)
	err = 0 
	step = 0
	steps = 0
	for i in answered:
		steps = steps + 1
	steps = steps * len(portList)
	print("Collecing Network Devices...")
	print("Devices detected: " + str(len(answered)))
	time.sleep(.5)
	print("\nCollecting Device Ports...")
	print("Ports targetted: " + str(steps))
	print("")
	bar = progressbar.ProgressBar(max_value=steps)
	time.sleep(1.5)
	###########################

	exploits = db.create_connection()

	VulnerablePorts = []
	#Initialise device & banner scanning
	###########################
	print(Fore.RED)
	print("Probing ports...")
	for i in answered:
		ip, mac = i[1].psrc, i[1].hwsrc
		data = [ip]
		taggedexploits = []
		for port in portList:
			step = step + 1
			bar.update(step)
			try:
				s = socket.socket()
				s.connect((ip, port))
				gbanner = s.recv(1024)
				s.close()

				## String splitting
				banner = str(gbanner)
				banner = banner[2:]
				banner = banner[:-3]
				banner.replace(' ', '')
				print(banner)
				## Add Vuln data to Data, if it's vulnerable!
				appending = False
				for exploit in exploits:
					if str(exploit[0]) == banner:
						taggedexploits.append([exploit[0], exploit[1], exploit[2]])
						data.append(taggedexploits)	
			
				if len(taggedexploits) > 0:
					VulnerablePorts.append(data)
				##
				time.sleep(.1)
				taggedexploits = []
			except:
				err + 1
				time.sleep(.1)
				#print(str(port) + ': CLOSED / BLOCKED') # Odd issues with P139, 445.	
	print(Fore.YELLOW + '-----------------------------------------------------------------------')
	#psrint('\nDEBUG: Detected Vulnerabilities;')
	#print(VulnerablePorts)
	#Run the vulnerability report.
	###########################
	vulnerability_report(VulnerablePorts)




def vulnerability_report(Data):
	#Fancy stuff.
	###########################
	print(Fore.GREEN)
	print('Banner Scanning Complete...')
	print('Generating vulnerability report...')
	time.sleep(1)
	x = 380
	y = 0
	for i in Data:
		y = y + 150
	# Initiate Main Menu
	root = tk.Tk(className = 'vulnerability report | Network Scanner')
	root.geometry(str(x) + "x" + str(y))
	setRow = 1
	setCol = 1
	for device in Data:
		setCol = 1
		tk.Label(root, text=device[0], borderwidth=0 ).grid(row=setRow,column=setCol)
		setRow = setRow + 1
		for vuns in device[1]:
			tk.Label(root, text="Vulnerability: " + vuns[0], borderwidth=0 ).grid(row=setRow,column=setCol)
			setRow = setRow + 1
			tk.Label(root, text="Type: " + vuns[1], borderwidth=0 ).grid(row=setRow,column=setCol)
			setRow = setRow + 1
			tk.Label(root, text="Exploit: " + vuns[2], borderwidth=0 ).grid(row=setRow,column=setCol)
			setRow = setRow + 1
			tk.Label(root, text='-------------', borderwidth=0 ).grid(row=setRow,column=setCol)
			setRow = setRow + 1
			tk.Button(root, text="RUN EXPLOIT", command = lambda: runExploit(device[0], vuns[2])).grid(row=setRow, column=setCol)
			setRow = setRow + 1
		tk.Label(root, text='-------------------------------------------------------------------------', borderwidth=0 ).grid(row=setRow,column=setCol)
		setRow = setRow + 1
		tk.Label(root, text='-------------------------------------------------------------------------', borderwidth=0 ).grid(row=setRow,column=setCol)
		setRow = setRow + 1

	root.mainloop()
	root.quit()
	menu.menu()


def runExploit(ip, exploit):
	subprocess.Popen(['gnome-terminal', 'executeExploit.sh test'], cwd='.', shell=False)

	

	#Return the user to the menu
	###########################

